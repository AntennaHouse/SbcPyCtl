CDfvObjPtr createDfvObject();
void releaseDfvObject(CDfvObjPtr pDfvObj);
char* getDocumentURI(CDfvObjPtr pDfvObj, char* pVal, int size);
void setDocumentURI(CDfvObjPtr pDfvObj, char* newVal);
char* getOutputFilePath(CDfvObjPtr pDfvObj, char* pVal, int size);
void setOutputFilePath(CDfvObjPtr pDfvObj, char* newVal);
char* getOptionFileURI(CDfvObjPtr pDfvObj, char* pVal, int size, int n);
void setOptionFileURI(CDfvObjPtr pDfvObj, char* newVal);
void addOptionFileURI(CDfvObjPtr pDfvObj, char* newVal);
int getOptionFileCount(CDfvObjPtr pDfvObj);
long getStartPage(CDfvObjPtr pDfvObj);
void setStartPage(CDfvObjPtr pDfvObj, long newVal);
long getEndPage(CDfvObjPtr pDfvObj);
void setEndPage(CDfvObjPtr pDfvObj, long newVal);
void setPdfOwnerPassword(CDfvObjPtr pDfvObj, char* newVal);
void setPdfUserPassword(CDfvObjPtr pDfvObj, char* newVal);
void setPdfNoPrinting(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoPrinting(CDfvObjPtr pDfvObj);
void setPdfNoChanging(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoChanging(CDfvObjPtr pDfvObj);
void setPdfNoContentCopying(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoContentCopying(CDfvObjPtr pDfvObj);
void setPdfNoAddingOrChangingCommnets(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoAddingOrChangingCommnets(CDfvObjPtr pDfvObj);
void setPdfNoAddingOrChangingComments(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoAddingOrChangingComments(CDfvObjPtr pDfvObj);
void setPdfVersion(CDfvObjPtr pDfvObj, DfvPDFVERSION newVal);
DfvPDFVERSION	getPdfVersion(CDfvObjPtr pDfvObj);
void setPdfNoFillForm(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoFillForm(CDfvObjPtr pDfvObj);
void setPdfNoAccessibility(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoAccessibility(CDfvObjPtr pDfvObj);
void setPdfNoAssembleDoc(CDfvObjPtr pDfvObj, long newVal);
long getPdfNoAssembleDoc(CDfvObjPtr pDfvObj);
void setPdfEncryptLevel(CDfvObjPtr pDfvObj, DfvPDFENCRYPTLEVEL newVal);
DfvPDFENCRYPTLEVEL getPdfEncryptLevel(CDfvObjPtr pDfvObj);
long getPdfEmbedAllFonts(CDfvObjPtr pDfvObj);
void setPdfEmbedAllFonts(CDfvObjPtr pDfvObj, long newVal);
char* getPdfEmbedFonts(CDfvObjPtr pDfvObj, char* pVal, int size);
void setPdfEmbedFonts(CDfvObjPtr pDfvObj, char* newVal);
long getPdfErrorOnEmbedFault(CDfvObjPtr pDfvObj);
void setPdfErrorOnEmbedFault(CDfvObjPtr pDfvObj, long newVal);
long getPdfErrorOnMissingGlyph(CDfvObjPtr pDfvObj);
void setPdfErrorOnMissingGlyph(CDfvObjPtr pDfvObj, long newVal);
DfvPDFPRINTALLOW getPdfPrintingAllowed(CDfvObjPtr pDfvObj);
void setPdfPrintingAllowed(CDfvObjPtr pDfvObj, DfvPDFPRINTALLOW newVal);
DfvPDFIMAGECOMPRESSION getPdfImageCompression(CDfvObjPtr pDfvObj);
void setPdfImageCompression(CDfvObjPtr pDfvObj, DfvPDFIMAGECOMPRESSION newVal);
int	 getPdfJPEGQuality(CDfvObjPtr pDfvObj);
void setPdfJPEGQuality(CDfvObjPtr pDfvObj, int newVal);
long getPdfCompressContentStream(CDfvObjPtr pDfvObj);
void setPdfCompressContentStream(CDfvObjPtr pDfvObj, long newVal);
long getPdfUseLaunchForRelativeURI(CDfvObjPtr pDfvObj);
void setPdfUseLaunchForRelativeURI(CDfvObjPtr pDfvObj, long newVal);
DfvPDFRGBCONVERSION getPdfRGBConversion(CDfvObjPtr pDfvObj);
void setPdfRGBConversion(CDfvObjPtr pDfvObj, DfvPDFRGBCONVERSION newVal);
int getPdfRasterizeResolution(CDfvObjPtr pDfvObj);
void setPdfRasterizeResolution(CDfvObjPtr pDfvObj, int newVal);
long getPdfLinearize(CDfvObjPtr pDfvObj);
void setPdfLinearize(CDfvObjPtr pDfvObj, long newVal);
DfvEMBEDALLFONT getPdfEmbedAllFontsEx(CDfvObjPtr pDfvObj);
void setPdfEmbedAllFontsEx(CDfvObjPtr pDfvObj, DfvEMBEDALLFONT newVal);
DfvIMAGEDOWNSAMPLING getPdfImageDownSampling(CDfvObjPtr pDfvObj);
void setPdfImageDownSampling(CDfvObjPtr pDfvObj, DfvIMAGEDOWNSAMPLING newVal);
int getPdfImageDownSamplingTarget(CDfvObjPtr pDfvObj);
void setPdfImageDownSamplingTarget(CDfvObjPtr pDfvObj, int newVal);
int getPdfImageDownSamplingDPI(CDfvObjPtr pDfvObj);
void setPdfImageDownSamplingDPI(CDfvObjPtr pDfvObj, int newVal);
long getPdfPutImageColorProfile(CDfvObjPtr pDfvObj);
void setPdfPutImageColorProfile(CDfvObjPtr pDfvObj, long newVal);
DfvPDFIMAGECOMPRESSION getPdfGrayscaleImageCompression(CDfvObjPtr pDfvObj);
void setPdfGrayscaleImageCompression(CDfvObjPtr pDfvObj, DfvPDFIMAGECOMPRESSION newVal);
int getPdfGrayscaleJPEGQuality(CDfvObjPtr pDfvObj);
void setPdfGrayscaleJPEGQuality(CDfvObjPtr pDfvObj, int newVal);
DfvIMAGEDOWNSAMPLING getPdfGrayscaleImageDownSampling(CDfvObjPtr pDfvObj);
void setPdfGrayscaleImageDownSampling(CDfvObjPtr pDfvObj, DfvIMAGEDOWNSAMPLING newVal);
int getPdfGrayscaleImageDownSamplingTarget(CDfvObjPtr pDfvObj);
void setPdfGrayscaleImageDownSamplingTarget(CDfvObjPtr pDfvObj, int newVal);
int getPdfGrayscaleImageDownSamplingDPI(CDfvObjPtr pDfvObj);
void setPdfGrayscaleImageDownSamplingDPI(CDfvObjPtr pDfvObj, int newVal);
DfvMONOCHROMECOMPRESSION getPdfMonochromeImageCompression(CDfvObjPtr pDfvObj);
void setPdfMonochromeImageCompression(CDfvObjPtr pDfvObj, DfvMONOCHROMECOMPRESSION newVal);
DfvIMAGEDOWNSAMPLING getPdfMonochromeImageDownSampling(CDfvObjPtr pDfvObj);
void setPdfMonochromeImageDownSampling(CDfvObjPtr pDfvObj, DfvIMAGEDOWNSAMPLING newVal);
int getPdfMonochromeImageDownSamplingTarget(CDfvObjPtr pDfvObj);
void setPdfMonochromeImageDownSamplingTarget(CDfvObjPtr pDfvObj, int newVal);
int getPdfMonochromeImageDownSamplingDPI(CDfvObjPtr pDfvObj);
void setPdfMonochromeImageDownSamplingDPI(CDfvObjPtr pDfvObj, int newVal);
char* getPdfOutputWidth(CDfvObjPtr pDfvObj, char* pVal, int size);
void setPdfOutputWidth(CDfvObjPtr pDfvObj, char* newVal);
char* getPdfOutputHeight(CDfvObjPtr pDfvObj, char* pVal, int size);
void setPdfOutputHeight(CDfvObjPtr pDfvObj, char* newVal);
long getPdfErrorOnPDFXFault(CDfvObjPtr pDfvObj);
void setPdfErrorOnPDFXFault(CDfvObjPtr pDfvObj, long newVal);
DfvSVGVERSION	getSvgVersion(CDfvObjPtr pDfvObj);
void setSvgVersion(CDfvObjPtr pDfvObj, DfvSVGVERSION newVal);
long getSvgGzipCompression(CDfvObjPtr pDfvObj);
void setSvgGzipCompression(CDfvObjPtr pDfvObj, long newVal);
long getSvgEmbedAllFonts(CDfvObjPtr pDfvObj);
void setSvgEmbedAllFonts(CDfvObjPtr pDfvObj, long newVal);
char* getSvgFormat(CDfvObjPtr pDfvObj, char* pVal, int size);
void setSvgFormat(CDfvObjPtr pDfvObj, char* newVal);
char* getSvgEmbedFonts(CDfvObjPtr pDfvObj, char* pVal, int size);
void setSvgEmbedFonts(CDfvObjPtr pDfvObj, char* newVal);
long getSvgErrorOnEmbedFault(CDfvObjPtr pDfvObj);
void setSvgErrorOnEmbedFault(CDfvObjPtr pDfvObj, long newVal);
DfvIMAGECONVERSION getSvgImageConversion(CDfvObjPtr pDfvObj);
void setSvgImageConversion(CDfvObjPtr pDfvObj, DfvIMAGECONVERSION newVal);
int getSvgJPEGQuality(CDfvObjPtr pDfvObj);
void setSvgJPEGQuality(CDfvObjPtr pDfvObj, int newVal);
DfvIMAGEPROCTYPE getSvgImageProcessingType(CDfvObjPtr pDfvObj);
void setSvgImageProcessingType(CDfvObjPtr pDfvObj, DfvIMAGEPROCTYPE newVal);
char* getSvgImageCopyPath(CDfvObjPtr pDfvObj, char* pVal, int size);
void setSvgImageCopyPath(CDfvObjPtr pDfvObj, char* newVal);
long getSvgSingleFile(CDfvObjPtr pDfvObj);
void setSvgSingleFile(CDfvObjPtr pDfvObj, long newVal);
int getSvgSingleFileMaxPages(CDfvObjPtr pDfvObj);
void setSvgSingleFileMaxPages(CDfvObjPtr pDfvObj, int newVal);
int getSvgImageDownsamplingDPI(CDfvObjPtr pDfvObj);
void setSvgImageDownsamplingDPI(CDfvObjPtr pDfvObj, int dpi);
int getSvgImageDownsamplingMethod(CDfvObjPtr pDfvObj);
void setSvgImageDownsamplingMethod(CDfvObjPtr pDfvObj, int type);
long getSvgImageRename(CDfvObjPtr pDfvObj);
void setSvgImageRename(CDfvObjPtr pDfvObj, long newVal);
char* getSvgImagePrefix(CDfvObjPtr pDfvObj, char* pVal, int size);
void setSvgImagePrefix(CDfvObjPtr pDfvObj, char* newVal);
long getSvgSinglePageNumber(CDfvObjPtr pDfvObj);
void setSvgSinglePageNumber(CDfvObjPtr pDfvObj, long newVal);
int getSvgRasterizeResolution(CDfvObjPtr pDfvObj);
void setSvgRasterizeResolution(CDfvObjPtr pDfvObj, int newVal);
void setMultiVolume(CDfvObjPtr pDfvObj, long newVal);
DfvIfErrorLevel getExitLevel(CDfvObjPtr pDfvObj);
void setExitLevel(CDfvObjPtr pDfvObj, DfvIfErrorLevel newVal);
DfvIfErrorLevel getErrorLevel(CDfvObjPtr pDfvObj);
DfvIfErrorCode getErrorCode(CDfvObjPtr pDfvObj);
char* getErrorMessage(CDfvObjPtr pDfvObj, char* pVal, int size);
void setFontAlias(CDfvObjPtr pDfvObj, char* src, const char* dst);
void clearFontAlias(CDfvObjPtr pDfvObj);
void eraseFontAlias(CDfvObjPtr pDfvObj, char* src);
DfvIfErrorCode execute(CDfvObjPtr pDfvObj);
void clear(CDfvObjPtr pDfvObj);
void setOnMessageProc(CDfvObjPtr pDfvObj, DfvOnMessageProc* proc);
void setOnMessageProcW(CDfvObjPtr pDfvObj, DfvOnMessageProcW* proc);
void setOnFormatPageProc(CDfvObjPtr pDfvObj, DfvOnFormatPageProc* proc);
void setOnMessageProcEx(CDfvObjPtr pDfvObj, DfvOnMessageProcEx* proc, void* pAnyObj);
void setOnMessageProcExW(CDfvObjPtr pDfvObj, DfvOnMessageProcExW* proc, void* pAnyObj);
void setOnFormatPageProcEx(CDfvObjPtr pDfvObj, DfvOnFormatPageProcEx* proc, void* pAnyObj);
char* getPrinterName(CDfvObjPtr pDfvObj, char* pVal, int size);
void setPrinterName(CDfvObjPtr pDfvObj, char* newVal);
long getPrnCopies(CDfvObjPtr pDfvObj);
void setPrnCopies(CDfvObjPtr pDfvObj, long newVal);
long getPrnCollate(CDfvObjPtr pDfvObj);
void setPrnCollate(CDfvObjPtr pDfvObj, long newVal);
long getBatchPrint(CDfvObjPtr pDfvObj);
void setBatchPrint(CDfvObjPtr pDfvObj, long newVal);
char* getVersion(CDfvObjPtr pDfvObj, char* pVal, int size);
DfvINXOUTPUTMODE getInxOutputMode(CDfvObjPtr pDfvObj);
void setInxOutputMode(CDfvObjPtr pDfvObj, DfvINXOUTPUTMODE newVal);
int getOmitBlankPages(CDfvObjPtr pDfvObj);
void setOmitBlankPages(CDfvObjPtr pDfvObj, int newVal);
long getFlashPartiallyOutput(CDfvObjPtr pDfvObj);
void setFlashPartiallyOutput(CDfvObjPtr pDfvObj, long newVal);
long getFlashHidePageButton(CDfvObjPtr pDfvObj);
void setFlashHidePageButton(CDfvObjPtr pDfvObj, long newVal);
long getFlashSplitPage(CDfvObjPtr pDfvObj);
void setFlashSplitPage(CDfvObjPtr pDfvObj, long newVal);
long getFlashOutputAction(CDfvObjPtr pDfvObj);
void setFlashOutputAction(CDfvObjPtr pDfvObj, long newVal);
int getFlashImageLimitSize(CDfvObjPtr pDfvObj);
void setFlashImageLimitSize(CDfvObjPtr pDfvObj, int newVal);
void setPrnFitPaper(CDfvObjPtr pDfvObj, int newVal);
void setPdfOutputScale(CDfvObjPtr pDfvObj, char* newVal);
int getRasterDPI(CDfvObjPtr pDfvObj);
void setRasterDPI(CDfvObjPtr pDfvObj, int newVal);
char* getRasterScale(CDfvObjPtr pDfvObj, char* pVal, int size);
void setRasterScale(CDfvObjPtr pDfvObj, char* newVal);
int getRasterHeight(CDfvObjPtr pDfvObj);
void setRasterHeight(CDfvObjPtr pDfvObj, int newVal);
char* getRasterFormat(CDfvObjPtr pDfvObj, char* pVal, int size);
void setRasterFormat(CDfvObjPtr pDfvObj, char* newVal);
int getRasterJpegQuality(CDfvObjPtr pDfvObj);
void setRasterJpegQuality(CDfvObjPtr pDfvObj, int newVal);
long getRasterUseGdiPlus(CDfvObjPtr pDfvObj);
void setRasterUseGdiPlus(CDfvObjPtr pDfvObj, long newVal);
long getRasterMonochrome(CDfvObjPtr pDfvObj);
void setRasterMonochrome(CDfvObjPtr pDfvObj, long newVal);
char* getRasterRGBProfile(CDfvObjPtr pDfvObj, char* pVal, int size);
void setRasterRGBProfile(CDfvObjPtr pDfvObj, char* newVal);
char* getRasterCMYKProfile(CDfvObjPtr pDfvObj, char* pVal, int size);
void setRasterCMYKProfile(CDfvObjPtr pDfvObj, char* newVal);
long getRasterGrayscale(CDfvObjPtr pDfvObj);
void setRasterGrayscale(CDfvObjPtr pDfvObj, long newVal);
long getRaster256Color(CDfvObjPtr pDfvObj);
void setRaster256Color(CDfvObjPtr pDfvObj, long newVal);
char* getRasterCompression(CDfvObjPtr pDfvObj, char* pVal, int size);
void setRasterCompression(CDfvObjPtr pDfvObj, char* newVal);
void setTextPaperHeight(CDfvObjPtr pDfvObj, char* newVal);
void setTextPaperWidth(CDfvObjPtr pDfvObj, char* newVal);
void setTextMarginLeft(CDfvObjPtr pDfvObj, char* newVal);
void setTextMarginTop(CDfvObjPtr pDfvObj, char* newVal);
void setTextMarginRight(CDfvObjPtr pDfvObj, char* newVal);
void setTextMarginBottom(CDfvObjPtr pDfvObj, char* newVal);
void setTextFontFamily(CDfvObjPtr pDfvObj, char* newVal);
void setTextFontSize(CDfvObjPtr pDfvObj, char* newVal);
void setTextShowPageNumber(CDfvObjPtr pDfvObj, int newVal);
void setTextShowLineNumber(CDfvObjPtr pDfvObj, int newVal);
void setTextLineNumberOffset(CDfvObjPtr pDfvObj, char* newVal);
void setTextLineNumberFormat(CDfvObjPtr pDfvObj, char* newVal);
int getGdiTextAntialias(CDfvObjPtr pDfvObj);
void setGdiTextAntialias(CDfvObjPtr pDfvObj, int newVal);
int getGdiLineartSmoothing(CDfvObjPtr pDfvObj);
void setGdiLineartSmoothing(CDfvObjPtr pDfvObj, int newVal);
int getGdiImageSmoothing(CDfvObjPtr pDfvObj);
void setGdiImageSmoothing(CDfvObjPtr pDfvObj, int newVal);
char* getWatermarkText(CDfvObjPtr pDfvObj, char* pVal, int size);
void setWatermarkText(CDfvObjPtr pDfvObj, char* newVal);
char* getWatermarkFontFamily(CDfvObjPtr pDfvObj, char* pVal, int size);
void setWatermarkFontFamily(CDfvObjPtr pDfvObj, char* newVal);
char* getWatermarkFontWeight(CDfvObjPtr pDfvObj, char* pVal, int size);
void setWatermarkFontWeight(CDfvObjPtr pDfvObj, char* newVal);
char* getWatermarkFontStyle(CDfvObjPtr pDfvObj, char* pVal, int size);
void setWatermarkFontStyle(CDfvObjPtr pDfvObj, char* newVal);
char* getWatermarkOpacity(CDfvObjPtr pDfvObj, char* pVal, int size);
void setWatermarkOpacity(CDfvObjPtr pDfvObj, char* newVal);
int getContinuePageNumber(CDfvObjPtr pDfvObj);
void setContinuePageNumber(CDfvObjPtr pDfvObj, int newVal);
char* getPdfColorProfile(CDfvObjPtr pDfvObj, char* pVal, int size);
void setPdfColorProfile(CDfvObjPtr pDfvObj, char* newVal);
